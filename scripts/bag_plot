#!/usr/bin/env python

import argparse
import logging

import matplotlib.pyplot as plt
import rosbag_pandas
import numpy as np


def build_parser():
    """
    Builds the parser for reading the command line arguments
    :return: Argument parser
    """
    parser = argparse.ArgumentParser(description='Bagfile key to graph')
    parser.add_argument('-b', '--bag', help='Bag file to read',
                        required=True, type=str)
    parser.add_argument('-k', '--key',
                        help='Key you would like to plot',
                        required=True, nargs='*')
    parser.add_argument('-y ', '--ylim',
                        help='Set min and max y lim',
                        required=False, nargs=2)
    parser.add_argument('-c', '--combined',
                        help="Graph them all on one",
                        required=False, action="store_true", dest="sharey")
    parser.add_argument('-v', '--verbose',
                        help="Log verbose",
                        default=False, action="store_true")
    parser.add_argument('-o', '--offset',
                        help="offsets for each topic",
                        default=None)
    parser.add_argument('-l', '--labels',
                        help='Labels to use instead of topic names, topic names otherwise',
                        default = None, nargs='*')
    parser.add_argument('-s', '--substract',
                        help='Index of keys to substract , ex: -s 0,1 2,4',
                        default = None, nargs = '*')
    parser.add_argument('-t', '--title',
                        help='Title for the figure',
                        default = None, type = str )
    parser.add_argument('-a', '--ylabel',
                        help='Label for vertical axis',
                        default = None, type = str )
    parser.add_argument('-d', '--xlabel',
                        help='Label for horizontal axis',
                        default = None, type = str )
    return parser


def graph(df, keys, sharey, offsets, labels, subs, title, ylabel, xlabel):

    if offsets is not None:
        offsets = [float(off) for off in offsets.split(',')]
    else:
        offsets = [0]*len(keys)

    if labels is None:
        labels = keys

    if sharey or len(keys) == 1:
        fig, axes = plt.subplots(figsize=(8,4))
        fig.suptitle(title)
        axes.grid(True)
        fig.figsize=(10,5)
        for key, offset, label in zip(keys,offsets, labels):
            s = df[key].dropna() - offset
            #s = df[key].fillna(method="bfill") - offset
            axes.plot(s.index, s.values, label=label)

        
        #print(df.index).dropna()
        if subs is not None:
            subs = [pair.split(',') for pair in subs]
            subs = [(int(i),int(j)) for i,j in  subs]
            for pair in subs:
                d1 = df[keys[pair[0]]] - offsets[pair[0]]
                d2 = df[keys[pair[1]]] - offsets[pair[1]]
                if (len(d1.index) > len(d2.index)):
                    d2 = d2.reindex(index = d1.index, method = 'bfill')
                    d1 = d1.fillna(method="bfill")
                else:
                    d1 = d1.reindex(index = d2.index, method = 'bfill')
                    d2 = d2.fillna(method="bfill")
                s = d1 - d2
                #print("columns",s.columns)
                axes.plot(s.index, s.values, label = "offset: " + labels[pair[0]] + "-" + labels[pair[1]])
                s = s[np.abs(s.values) < 1.0]
                #fig.suptitle(title +"\n error mean: {:.2f} std: {}".format(s.mean(skipna = True), s.std(skipna=True)))
        axes.legend(loc=0)
        axes.set_ylabel(ylabel)
        axes.set_xlabel(xlabel)

    else:
        fig, axes = plt.subplots(len(keys), sharex=True)
        idx = 0
        for key, offset, label in zip(keys,offsets, labels):
            s = df[key].dropna() - offset
            #s = df[key].fillna(value = 0.0) - offset
            axes[idx].plot(s.index, s.values)
            axes[idx].set_title(label)
            idx = idx + 1
    
    plt.show()


if __name__ == '__main__':
    parser = build_parser()
    args = parser.parse_args()

    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)

    topics = rosbag_pandas.topics_from_keys(args.key)
    df = rosbag_pandas.bag_to_dataframe(args.bag, include=topics)
    graph(df, args.key, args.sharey, args.offset, args.labels, args.substract, args.title, args.ylabel, args.xlabel)
